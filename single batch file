'''Import Required Packages'''
from datetime import datetime
from multiprocessing.resource_sharer import stop
import pandas as pd
import numpy as np

'''Start timer'''
start_time=datetime.now()

'''Import LC-ICMPS gui output, 'concentrations_uM_all', and replace all NaNs with 0s, set variables'''

all_concentrations = pd.read_csv('concentrations_uM_all.csv', skiprows=2, index_col=False)
all_concentrations.replace(np.nan,0,inplace=True)
cobalt = all_concentrations['59Co']
iron = all_concentrations['56Fe']
all_concentrations = all_concentrations.rename(columns={'56Fe' : 'fe', '55Mn':'mn', '59Co':'co', '60Ni':'ni', '63Cu':'cu', '66Zn':'zn', '111Cd':'cd', '208Pb':'pb'})
all_concentrations.iloc[:,2:5] = all_concentrations.iloc[:,2:5].astype('string')
numcols = all_concentrations.dtypes == float
zeros = np.sum((all_concentrations.loc[:,numcols]) != 0, axis=1) !=0
all_concentrations = all_concentrations[zeros]
all_concentrations['standards'] = all_concentrations.apply(lambda x: x.zn == x.mn == x.fe == x.cd == x.ni == x.cu == x.pb, axis=1)

'''Filter through columns with only 59Co values for B-12 QC check, append column with 'True' for a pass, 'False' for a fail, and 'Good'
for all samples to which the QC check does not apply (samples with other metals)'''
all_concentrations['B12QC'] = abs(1-cobalt).le(0.20) & all_concentrations.standards ==True
B12QC = all_concentrations['B12QC']
all_concentrations.to_csv(r'x_B12QCsummary.csv')
fails = all_concentrations.loc[(all_concentrations.standards == True) & (B12QC.eq(False))]
all_concentrations['QCDNP'] = (all_concentrations.standards == False) & (B12QC.eq(False))
all_concentrations.loc[all_concentrations['QCDNP'] == True, 'B12QC'] = 'Good'
all_concentrations = all_concentrations.drop('QCDNP',axis=1)
all_concentrations

rerun = fails.loc[(fails['co'] < 0.6)]
rerun.to_csv(r'x_samples to rerun.csv')
delete = rerun.filename.to_list()
all_concentrations = all_concentrations[all_concentrations.filename.isin(delete) == False]


'''Changes 'start_time' and 'stop_time' column values to reflect total integrations and B12QC runs'''
all_concentrations['total_time'] = all_concentrations.stop_time.astype(float)-all_concentrations.start_time.astype(float)
all_concentrations.loc[all_concentrations['standards']== True, 'start_time'] = 'B12-QC' 
all_concentrations.loc[all_concentrations['standards']== True, 'stop_time'] = '' 
all_concentrations.loc[all_concentrations['total_time'] > 35.0, 'start_time'] = 'Total'
all_concentrations.loc[all_concentrations['total_time'] > 35.0, 'stop_time'] = ''
all_concentrations.pop('total_time')
all_concentrations.drop('standards', inplace=True, axis=1)
all_concentrations.to_csv(r'x_only_data_passed_B12.csv')
all_concentrations = all_concentrations.rename(columns={'fe' : '56Fe', 'mn':'55Mn', 'co':'59Co', 'ni':'60Ni', 'cu':'63Cu', 'zn':'66Zn', 'cd':'111Cd', 'pb':'208Pb'})

'''Considers 5L dilution for metals, and converts uM to nM concentrations for metals and B12'''
all_concentrations[['55Mn','56Fe','60Ni','63Cu','66Zn','111Cd','208Pb']] = all_concentrations[['55Mn','56Fe','60Ni','63Cu','66Zn','111Cd','208Pb']].div(5)
all_concentrations[['59Co']] = all_concentrations[['59Co']].multiply(1000)

'''Combine start and stop time columns to create a unique time-ID'er for each set of data integrations, append it to the column name of each 
set of data, organize unique time-ID data according to sample in a new dataframe called: 'renamed_data'
--Depends heavily on ID column being 15th column, and first column being sample names--'''
all_concentrations['check'] = all_concentrations.start_time.str.contains('QC|Total', regex = True)
all_concentrations['newname'] = all_concentrations['start_time'].astype(str) +'-'+ all_concentrations['stop_time'].astype(str)+'(min)'
all_concentrations['ID'] = all_concentrations['start_time']
all_concentrations['ID'] = np.where(all_concentrations.check == True, all_concentrations.start_time, all_concentrations.newname)
all_concentrations.pop('check')
all_concentrations.pop('newname')
yikes = pd.DataFrame()
l = all_concentrations['ID'].unique()
yikes['times'] = l

renamed_data = pd.DataFrame(columns = ['filename'])
for time in yikes.times:
    new_df = all_concentrations.loc[all_concentrations['ID']==time]
    new_df = new_df.set_index('filename')
    new_df = new_df.add_prefix(' ')
    new_df = new_df.add_prefix(time)
    new_df = new_df.add_suffix('-L [nM]')
    new_df.reset_index(inplace=True)
    renamed_data = renamed_data.merge(new_df, on='filename', how='outer')
renamed_data


'''Cleans up remaining data by dropping full columns that are not metal areas or ID'ers. Formats dataframe columns and sample names
 to match the Master data sheet: OC2102_Sample_1.csv ----> OC2102_1'''
renamed_data = renamed_data[renamed_data.columns.drop(list(renamed_data.filter(regex='ID')))]
renamed_data = renamed_data[renamed_data.columns.drop(list(renamed_data.filter(regex='_time')))]
renamed_data = renamed_data[renamed_data.columns.drop(list(renamed_data.filter(regex='correction')))]
renamed_data = renamed_data[renamed_data.columns.drop(list(renamed_data.filter(regex='tstamp')))]
renamed_data = renamed_data[renamed_data.columns.drop(list(renamed_data.filter(regex='B12QC')))]
renamed_data['filename'] = renamed_data['filename'].str.split(".").str[0]
renamed_data['filename'].replace('Sample_','',regex=True, inplace=True)
renamed_data['filename'].replace('Sample_','',regex=True,inplace=True)
renamed_data.rename(columns = {'filename':'Sample'}, inplace=True)

'''Replaces all NaNs with 0's, and deletes any column that is all zeros, deletes all std_mix, pooled, or elution blank samples'''
renamed_data.replace(np.nan,0,inplace=True)
renamed_data = renamed_data.loc[:, (renamed_data != 0).any(axis=0)]

pooled = renamed_data['Sample'].str.contains('pooled')
renamed_data = renamed_data[~pooled]
elution = renamed_data['Sample'].str.contains('elution')
renamed_data = renamed_data[~elution]
Std = renamed_data['Sample'].str.contains('Std')
renamed_data = renamed_data[~Std]

renamed_data.to_csv('x_cleaned integrations.csv')

'''Imports master colletion of OC Data (available on box in folder). Removes A off of OC2102A or OC2107A, 
to match with format in renamed_data df'''
all_data=pd.read_csv('OC_Master_Sheet.csv', index_col=False)
all_data['Sample'] = all_data['Cruise'] + '_' + all_data['Sample'].astype('str')
all_data.pop('Cruise')
all_data.replace(0, np.nan, inplace=True)
all_data.to_csv('x_cleaned cruise data.csv')

'''Changes bottom depth to ODV specific naming convention in order to enable bathymetry based on data (station depths)'''
all_data.rename(columns = {'Bottom depth [m]':'Bot.Depth [m]'}, inplace=True)
non_Zeros = list(all_data)

'''Combines dataframes based on the 'Sample' column. Replaces NaNs with 0's. Deletes duplicate rows'''
all_data = all_data.merge(renamed_data, on = 'Sample', how='left')
all_data = all_data[~all_data.duplicated()]
all_data.to_csv(r'x_combined.csv')

'''Creates a copy dataframe to utilize if merging new data in the following block'''
first_set = all_data

'''Splits Cruise and Sample into different columns based on '_' delimeter'''
all_data[['Cruise','Sample']] = all_data['Sample'].str.split('_',expand=True)


'''Convert to CSV for import to ODV'''
all_data.to_csv(r'all_concentrations_nM_ODV_format.csv')



'''Display final data frame'''
all_data
